class Euclide(time=0.125, taps=16, onsets=10, poly=1)[source]
Euclidean rhythm generator.

This object generates euclidean trigger patterns, resulting in onsets in the rhythm to be as equidistant as possible.

A trigger is an audio signal with a value of 1 surrounded by 0s.

The play() method starts the Euclide and is not called at the object creation time.

Parent
PyoObject

Args
time: float or PyoObject, optional
Time, in seconds, between each beat of the pattern. Defaults to 0.125.

taps: int, optional
Number of beats in the generated pattern (measure length), max = 64. Defaults to 16.

onsets: int, optional
Number of onsets (a positive tap) in the generated pattern. Defaults to 10.

poly: int, optional
Beat polyphony. Denotes how many independent streams are generated by the object, allowing overlapping processes.

Available only at initialization. Defaults to 1.

hihat_click.setTime(tempo * 4/5)

class Centroid(input, size=1024, mul=1, add=0)[source]
Computes the spectral centroid of an input signal.

Output signal is the spectral centroid, in Hz, of the input signal. It indicates where the “center of mass” of the spectrum is. Perceptually, it has a robust connection with the impression of “brightness” of a sound.

Centroid does its computation with two overlaps, so a new output value comes every half of the FFT window size.

Parent
PyoObject

Args
input: PyoObject
Input signal to process.

size: int, optional
Size, as a power-of-two, of the FFT used to compute the centroid.

Available at initialization time only. Defaults to 1024.

Note The out() method is bypassed. Centroid’s signal can not be sent to audio outs.
s = Server().boot()
s.start()
a = SfPlayer(SNDS_PATH + "/transparent.aif", loop=True, mul=.4).out()
b = Centroid(a, 1024)
c = Port(b, 0.05, 0.05)
d = ButBP(Noise(0.2), freq=c, q=5).out(1)